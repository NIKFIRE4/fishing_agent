"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
import asyncio
import time
from bot.states.states import PostStates
from bot.keyboards.user_keyboards import (
    get_cancel_keyboard, get_photos_keyboard, 
    get_confirm_keyboard, get_main_menu_keyboard
)
from config import ADMIN_ID
from bot.services.post_service import PostService
from bot.services.moderation_service import ModerationService
from bot.utils.helpers import validate_date
from config import MAX_PHOTOS, MIN_DESCRIPTION_LENGTH, MAX_DESCRIPTION_LENGTH, MESSAGES
from ..database.user_service import UserService
from bot.utils import admin
router = Router()

def is_admin(user_id: int) -> bool:
    return user_id in admin.ADMIN_IDS
@router.callback_query(F.data == "create_post")
async def start_post_creation(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    await callback.answer()
    
    await callback.message.edit_text(
        "üìÖ –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ—Å—Ç –æ –≤–∞—à–µ–º –ø–æ—Ö–æ–¥–µ!\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ **–¥–∞—Ç—É –ø–æ—Ö–æ–¥–∞** –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì**\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `15.09.2025`",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(PostStates.waiting_for_date)

@router.message(PostStates.waiting_for_date)
async def process_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Ö–æ–¥–∞"""
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_date: '{message.text}'")
    
    date_obj = validate_date(message.text)
    
    if not date_obj:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç **–î–î.–ú–ú.–ì–ì–ì–ì**\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `15.09.2025`",
            reply_markup=get_cancel_keyboard(),
            parse_mode="Markdown"
        )
        return
    
    print(f"DEBUG: –î–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞: {date_obj}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É
    await state.update_data(date=message.text)
    
    await message.answer(
        "üì∏ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏** —Å –ø–æ—Ö–æ–¥–∞.\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç 1 –¥–æ {MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ **\"‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É\"**",
        reply_markup=get_photos_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(PostStates.waiting_for_photos)
    await state.update_data(photos=[])

@router.message(PostStates.waiting_for_photos, F.photo)
async def process_photos(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ ‚Äî
    –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º–∞ (debounce –ø–æ media_group_id).
    """
    data = await state.get_data()
    photos = data.get('photos', [])

    if len(photos) >= MAX_PHOTOS:
        await message.answer(
            f"‚ùå –ú–∞–∫—Å–∏–º—É–º {MAX_PHOTOS} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!",
            reply_markup=get_photos_keyboard()
        )
        return

    # file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
    photo_file_id = message.photo[-1].file_id
    photos.append(photo_file_id)
    await state.update_data(photos=photos)

    media_group_id = getattr(message, "media_group_id", None)

    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ —á–∞—Å—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã (–∞–ª—å–±–æ–º–∞) ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É,
    # –∞ –¥–µ–ª–∞–µ–º "–¥–µ–±–∞—É–Ω—Å": –∂–¥—ë–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—à–ª–æ –ª–∏ –µ—â—ë —Ñ–æ—Ç–æ —Å —Ç–µ–º –∂–µ album id.
    if media_group_id:
        ts = time.time()
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–ª—å–±–æ–º–∞ –∏ –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await state.update_data(last_media_group_id=media_group_id, album_update_time=ts)

        # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ ‚Äî –¥–∞—ë–º –≤—Ä–µ–º—è –ø—Ä–∏–π—Ç–∏ –æ—Å—Ç–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –∞–ª—å–±–æ–º–∞
        await asyncio.sleep(0.6)  # –º–æ–∂–Ω–æ —Ç–æ–Ω–∫–æ –ø–æ–¥–±–∏—Ä–∞—Ç—å (0.4..1.0) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–¥–µ—Ä–∂–µ–∫

        # –∑–∞–Ω–æ–≤–æ –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å –ª–∏ –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        sdata = await state.get_data()
        if sdata.get("album_update_time") == ts:
            # –ú–µ—Ç–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äî —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–∑–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞.
            total = len(sdata.get("photos", []))
            await message.answer(
                f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: **{total}/{MAX_PHOTOS}**\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ **\"‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É\"**",
                reply_markup=get_photos_keyboard(),
                parse_mode="Markdown"
            )
        else:
            # –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∞–ª—å–±–æ–º–∞ ‚Äî –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç/–æ—Ç–ø—Ä–∞–≤–∏—Ç –∏—Ç–æ–≥.
            return

    else:
        # –û–±—ã—á–Ω–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: **{len(photos)}/{MAX_PHOTOS}**\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ **\"‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É\"**",
            reply_markup=get_photos_keyboard(),
            parse_mode="Markdown"
        )

@router.callback_query(F.data == "finish_photos")
async def finish_photos(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    await callback.answer()
    
    data = await state.get_data()
    photos = data.get('photos', [])
    
    if not photos:
        await callback.message.edit_text(
            "‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!",
            reply_markup=get_photos_keyboard()
        )
        return
    
    await callback.message.edit_text(
        "üìç –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞** –ø–æ—Ö–æ–¥–∞.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–§–∏–Ω—Å–∫–∏–π –∑–∞–ª–∏–≤, –ö–∞–Ω–æ–Ω–µ—Ä—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤', '–õ–∞–¥–æ–∂—Å–∫–æ–µ –æ–∑–µ—Ä–æ, –ù–∞–∑–∏—è', '–õ–µ–º–±–æ–ª–æ–≤–æ'",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(PostStates.waiting_for_location_name)

@router.message(PostStates.waiting_for_location_name)
async def process_location_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞"""
    location_name = message.text.strip()
    
    if len(location_name) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if len(location_name) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(location_name=location_name)
    
    await message.answer(
        "üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å **–æ–ø–∏—à–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é** –ø–æ–¥—Ä–æ–±–Ω–µ–µ.\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞, —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å, "
        "—Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Ö–æ–¥–∞ –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.\n\n"
        f"–ú–∏–Ω–∏–º—É–º {MIN_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH}",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(PostStates.waiting_for_location_description)

@router.message(PostStates.waiting_for_location_description)
async def process_location_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏"""
    description = message.text.strip()
    
    if len(description) < MIN_DESCRIPTION_LENGTH:
        await message.answer(
            f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º {MIN_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if len(description) > MAX_DESCRIPTION_LENGTH:
        await message.answer(
            f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(location_description=description)
    
    await message.answer(
        "üó∫Ô∏è –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ **–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–æ–∫–∞—Ü–∏–∏**.\n\n"
        "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ –î–µ—Å—è—Ç–∏—á–Ω—ã–µ –≥—Ä–∞–¥—É—Å—ã: `55.7558, 37.6173`\n"
        "‚Ä¢ –ì—Ä–∞–¥—É—Å—ã/–º–∏–Ω—É—Ç—ã: `55¬∞45'21\"N 37¬∞37'02\"E`\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—ã\n"
        "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(PostStates.waiting_for_coordinates)

@router.message(PostStates.waiting_for_coordinates, F.location)
async def process_location_coordinates(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    coordinates = f"{message.location.latitude}, {message.location.longitude}"
    await finish_post_creation(message, state, coordinates, bot)

@router.message(PostStates.waiting_for_coordinates)
async def process_text_coordinates(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    coordinates = message.text.strip()
    
    if len(coordinates) < 3:
        await message.answer(
            "‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ! –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await finish_post_creation(message, state, coordinates, bot)

async def finish_post_creation(message: Message, state: FSMContext, coordinates: str, bot: Bot):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    await state.update_data(coordinates=coordinates)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = (
        "üìã **–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ü–û–°–¢–ê**\n\n"
        f"üìÖ **–î–∞—Ç–∞ –ø–æ—Ö–æ–¥–∞:** {data['date']}\n"
        f"üì∏ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:** {len(data['photos'])}\n"
        f"üìç **–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:** {data['location_name']}\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**\n{data['location_description']}\n"
        f"üó∫Ô∏è **–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:** {coordinates}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ? –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å."
    )
    
    await message.answer(
        preview_text,
        reply_markup=get_confirm_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "confirm_post")
async def confirm_post(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"""
    await callback.answer()
    
    await UserService.get_or_create_user(callback.from_user)
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
    post_id, post_data = PostService.create_post(
        user=callback.from_user,
        date=data['date'],
        photos=data['photos'],
        location_name=data['location_name'],
        location_description=data['location_description'],
        coordinates=data['coordinates']
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
    moderation_service = ModerationService(bot)
    await moderation_service.send_to_moderation(post_id, post_data)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.edit_text(
        MESSAGES["post_created"],
        reply_markup=get_main_menu_keyboard()
    )
    
    await state.clear()

@router.callback_query(F.data == "edit_post")
async def edit_post(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç (–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ)"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚úèÔ∏è –•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ!\n\n"
        "–£–∫–∞–∂–∏—Ç–µ **–¥–∞—Ç—É –ø–æ—Ö–æ–¥–∞** –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–î–î.–ú–ú.–ì–ì–ì–ì**\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `15.09.2025`",
        reply_markup=get_cancel_keyboard(),
        parse_mode="Markdown"
    )
    
    await state.set_state(PostStates.waiting_for_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ —Ñ–æ—Ç–æ
@router.message(PostStates.waiting_for_photos)
async def handle_non_photo_in_photos_state(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ-—Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ"""
    await message.answer(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ **\"‚úÖ –ó–∞–∫–æ–Ω—á–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É\"**",
        reply_markup=get_photos_keyboard(),
        parse_mode="Markdown"
    )

# –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í –°–ê–ú–û–ú –ö–û–ù–¶–ï!
@router.message()
async def handle_unknown_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (fallback)"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
    if is_admin(message.from_user.id) and current_state and str(current_state).startswith('EditPostStates'):
        return
    
    if current_state is None:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–æ –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if str(current_state).startswith('PostStates'):
            await message.answer(
                "‚ùì –ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.",
                reply_markup=get_cancel_keyboard()
            )
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
            await message.answer(
                "‚ùì –ù–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
                reply_markup=get_main_menu_keyboard()
            )