"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
"""
import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import os
from bot.services.post_service import PostService
from bot.services.moderation_service import ModerationService
from bot.keyboards.admin_keyboards import (
    get_admin_main_menu, get_back_to_admin_keyboard, 
    get_queue_navigation_keyboard
)
from bot.keyboards.user_keyboards import get_main_menu_keyboard
from bot.states.states import EditPostStates
from bot.utils.helpers import validate_date
from config import MIN_DESCRIPTION_LENGTH, MAX_DESCRIPTION_LENGTH
from config import ADMIN_ID
from bot.utils import admin
logger = logging.getLogger(__name__)
router = Router()

def is_admin(user_id: int) -> bool:
    return user_id in admin.ADMIN_IDS

@router.message(Command("admin"))
async def admin_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /admin - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    username = message.from_user.username or message.from_user.first_name
    
    await message.answer(
        f"–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_main_menu()
    )

@router.callback_query(F.data == "back_to_admin")
async def back_to_admin_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    
    username = callback.from_user.username or callback.from_user.first_name
    
    await callback.message.edit_text(
        f"–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_main_menu()
    )

@router.callback_query(F.data == "refresh_admin_menu")
async def refresh_admin_menu(callback: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer("–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    
    username = callback.from_user.username or callback.from_user.first_name
    
    await callback.message.edit_text(
        f"–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, @{username}!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_main_menu()
    )

@router.callback_query(F.data == "main_menu")
async def go_to_main_menu(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    
    await callback.message.edit_text(
        "–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    
    memory_stats = PostService.get_statistics()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    from ..database.user_service import UserService
    db_stats = await UserService.get_all_users_stats()
    
    stats_text = (
        f"–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê\n\n"
        f"–ü–û–°–¢–´:\n"
        f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {memory_stats['total_posts']}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {db_stats['total_posts']}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {db_stats['total_submitted']}\n"
        f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {db_stats['approval_rate']}%\n\n"
        f"–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {db_stats['total_users']}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {db_stats['recent_users']}\n"
    )
    
    if db_stats['top_users']:
        stats_text += "\n–¢–û–ü –ê–í–¢–û–†–´:\n"
        for user in db_stats['top_users'][:5]:
            stats_text += f"‚Ä¢ {user['username']}: {user['posts_count']} –ø–æ—Å—Ç–æ–≤\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë• –ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="recent_users")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω –º–µ–Ω—é", callback_data="back_to_admin")]
    ])
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_back_to_admin_keyboard()
    )

@router.callback_query(F.data == "moderation_queue")
async def show_moderation_queue(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    
    stats = PostService.get_statistics()
    
    if stats['total_posts'] == 0:
        await callback.message.edit_text(
            "–û–ß–ï–†–ï–î–¨ –ú–û–î–ï–†–ê–¶–ò–ò –ü–£–°–¢–ê\n\n"
            "–ù–µ—Ç –ø–æ—Å—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
            reply_markup=get_back_to_admin_keyboard()
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
    post_ids = list(stats['all_posts'].keys())
    first_post_id = post_ids[0]
    await show_post_details(callback, first_post_id, 0)

async def show_post_details(callback_or_message, post_id: str, index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ—Å—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    post_data = PostService.get_post(post_id)
    if not post_data:
        if hasattr(callback_or_message, 'message'):
            await callback_or_message.message.edit_text(
                "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_to_admin_keyboard()
            )
        else:
            await callback_or_message.edit_text(
                "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", 
                reply_markup=get_back_to_admin_keyboard()
            )
        return
    
    stats = PostService.get_statistics()
    
    post_text = (
        f"–ü–û–°–¢ –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò ({index + 1}/{stats['total_posts']})\n\n"
        f"–ê–≤—Ç–æ—Ä: @{post_data.username}\n"
        f"–î–∞—Ç–∞ –ø–æ—Ö–æ–¥–∞: {post_data.date}\n"
        f"–ú–µ—Å—Ç–æ: {post_data.location_name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {post_data.location_description[:200]}{'...' if len(post_data.location_description) > 200 else ''}\n"
        f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {post_data.coordinates}\n"
        f"–§–æ—Ç–æ: {len(post_data.photos)} —à—Ç.\n"
        f"–°–æ–∑–¥–∞–Ω: {post_data.timestamp.strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    if hasattr(callback_or_message, 'message'):
        await callback_or_message.message.edit_text(
            post_text,
            reply_markup=get_queue_navigation_keyboard(stats['all_posts'], index)
        )
    else:
        await callback_or_message.edit_text(
            post_text,
            reply_markup=get_queue_navigation_keyboard(stats['all_posts'], index)
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    if post_data.photos:
        bot = callback_or_message.bot if hasattr(callback_or_message, 'bot') else callback_or_message.message.bot
        chat_id = callback_or_message.from_user.id if hasattr(callback_or_message, 'from_user') else callback_or_message.message.chat.id
        
        try:
            if len(post_data.photos) == 1:
                await bot.send_photo(
                    chat_id=chat_id,
                    photo=post_data.photos[0]
                )
            else:
                media = [InputMediaPhoto(media=photo_id) for photo_id in post_data.photos]
                await bot.send_media_group(
                    chat_id=chat_id,
                    media=media
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

@router.callback_query(F.data.startswith("view_post_"))
async def view_specific_post(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    await callback.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: view_post_{post_id}_{index}
        parts = callback.data.split("_")
        post_id = "_".join(parts[2:-1])  # ID –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        index = int(parts[-1])
        
        await show_post_details(callback, post_id, index)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞: {e}")
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞",
            reply_markup=get_back_to_admin_keyboard()
        )

@router.callback_query(F.data == "noop")
async def noop_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–∑–∞–≥–ª—É—à–µ–∫"""
    await callback.answer()

@router.callback_query(F.data.startswith("edit_post_"))
async def start_edit_post(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    post_id = callback.data.replace("edit_post_", "")
    post_data = PostService.get_post(post_id)
    
    if not post_data:
        await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø–æ—Å—Ç–∞
    await state.update_data(editing_post_id=post_id)
    
    edit_menu = (
        f"–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–ê\n\n"
        f"–ê–≤—Ç–æ—Ä: @{post_data.username}\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {post_data.date}\n"
        f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ: {post_data.location_name}\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {post_data.location_description[:100]}{'...' if len(post_data.location_description) > 100 else ''}\n"
        f"–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {post_data.coordinates}\n"
        f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(post_data.photos)}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –î–∞—Ç—É", callback_data=f"edit_date_{post_id}"),
            InlineKeyboardButton(text="üìç –ú–µ—Å—Ç–æ", callback_data=f"edit_name_{post_id}")
        ],
        [
            InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_location_{post_id}"),
            InlineKeyboardButton(text="üó∫Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", callback_data=f"edit_coords_{post_id}")
        ],
        [
            InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{post_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="moderation_queue")
        ]
    ])
    
    await callback.message.edit_text(edit_menu, reply_markup=keyboard)

@router.callback_query(F.data.startswith("edit_date_"))
async def edit_post_date(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø–æ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    post_id = callback.data.replace("edit_date_", "")
    await callback.answer()
    
    await state.update_data(editing_post_id=post_id)
    await state.set_state(EditPostStates.edit_date)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_post_{post_id}")]
        ])
    )

@router.callback_query(F.data.startswith("edit_name_"))
async def edit_post_name(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    post_id = callback.data.replace("edit_name_", "")
    await callback.answer()
    
    await state.update_data(editing_post_id=post_id)
    await state.set_state(EditPostStates.edit_location_name)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_post_{post_id}")]
        ])
    )

@router.callback_query(F.data.startswith("edit_location_"))
async def edit_post_location(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    post_id = callback.data.replace("edit_location_", "")
    await callback.answer()
    
    await state.update_data(editing_post_id=post_id)
    await state.set_state(EditPostStates.edit_location_description)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_post_{post_id}")]
        ])
    )

@router.callback_query(F.data.startswith("edit_coords_"))
async def edit_post_coordinates(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ—Å—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    post_id = callback.data.replace("edit_coords_", "")
    await callback.answer()
    
    await state.update_data(editing_post_id=post_id)
    await state.set_state(EditPostStates.edit_coordinates)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_post_{post_id}")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(EditPostStates.edit_date)
async def process_edit_date(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    current_state = await state.get_state()
    if current_state != EditPostStates.edit_date:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    date_obj = validate_date(message.text)
    if not date_obj:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.09.2025"
        )
        return
    
    data = await state.get_data()
    post_id = data.get('editing_post_id')
    
    if not post_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
    post_data = PostService.get_post(post_id)
    if not post_data:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    post_data.date = message.text
    await message.answer(f"‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {message.text}")
    await state.clear()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await return_to_edit_menu(message, post_id, bot)

@router.message(EditPostStates.edit_location_name)
async def process_edit_location_name(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    current_state = await state.get_state()
    if current_state != EditPostStates.edit_location_name:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    location_name = message.text.strip()
    
    if len(location_name) < 2:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        return
    
    if len(location_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    data = await state.get_data()
    post_id = data.get('editing_post_id')
    
    if not post_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    post_data = PostService.get_post(post_id)
    if not post_data:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    post_data.location_name = location_name
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
    
    await return_to_edit_menu(message, post_id, bot)

@router.message(EditPostStates.edit_location_description)
async def process_edit_location_description(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    current_state = await state.get_state()
    if current_state != EditPostStates.edit_location_description:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    description = message.text.strip()
    
    if len(description) < MIN_DESCRIPTION_LENGTH:
        await message.answer(f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ! –ú–∏–Ω–∏–º—É–º {MIN_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    if len(description) > MAX_DESCRIPTION_LENGTH:
        await message.answer(f"‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {MAX_DESCRIPTION_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    data = await state.get_data()
    post_id = data.get('editing_post_id')
    
    if not post_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    post_data = PostService.get_post(post_id)
    if not post_data:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    post_data.location_description = description
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()
    
    await return_to_edit_menu(message, post_id, bot)

@router.message(EditPostStates.edit_coordinates)
async def process_edit_coordinates(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    current_state = await state.get_state()
    if current_state != EditPostStates.edit_coordinates:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    coordinates = message.text.strip()
    
    if len(coordinates) < 3:
        await message.answer("‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ! –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.")
        return
    
    data = await state.get_data()
    post_id = data.get('editing_post_id')
    
    if not post_id:
        await message.answer("–û—à–∏–±–∫–∞: ID –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    post_data = PostService.get_post(post_id)
    if not post_data:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    post_data.coordinates = coordinates
    await message.answer("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    await state.clear()
    
    await return_to_edit_menu(message, post_id, bot)

async def return_to_edit_menu(message: Message, post_id: str, bot: Bot):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    post_data = PostService.get_post(post_id)
    if not post_data:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    edit_menu = (
        f"–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–ê\n\n"
        f"–ê–≤—Ç–æ—Ä: @{post_data.username}\n"
        f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {post_data.date}\n"
        f"–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ: {post_data.location_name}\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {post_data.location_description[:100]}{'...' if len(post_data.location_description) > 100 else ''}\n"
        f"–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {post_data.coordinates}\n"
        f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(post_data.photos)}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìÖ –î–∞—Ç—É", callback_data=f"edit_date_{post_id}"),
            InlineKeyboardButton(text="üìç –ú–µ—Å—Ç–æ", callback_data=f"edit_name_{post_id}")
        ],
        [
            InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_location_{post_id}"),
            InlineKeyboardButton(text="üó∫Ô∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã", callback_data=f"edit_coords_{post_id}")
        ],
        [
            InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –æ–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{post_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="moderation_queue")
        ]
    ])
    
    await message.answer(edit_menu, reply_markup=keyboard)

@router.callback_query(F.data.startswith("request_edit_"))
async def request_edit(callback: CallbackQuery, bot: Bot):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∫–∏ –æ—Ç –∞–≤—Ç–æ—Ä–∞ (—Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    post_id = callback.data.replace("request_edit_", "")
    
    moderation_service = ModerationService(bot)
    success = await moderation_service.request_edit(post_id)
    
    if success:
        await callback.answer("–ê–≤—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∞–≤–æ–∫")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await show_moderation_queue(callback)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∞–≤–æ–∫", show_alert=True)

@router.callback_query(F.data.startswith("approve_"))
async def approve_post(callback: CallbackQuery, bot: Bot):
    """–û–¥–æ–±—Ä—è–µ—Ç –ø–æ—Å—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    post_id = callback.data.replace("approve_", "")
    
    moderation_service = ModerationService(bot)
    success = await moderation_service.approve_post(post_id)
    
    if success:
        await callback.answer("–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await show_moderation_queue(callback)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("reject_"))
async def reject_post(callback: CallbackQuery, bot: Bot):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–æ—Å—Ç"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    post_id = callback.data.replace("reject_", "")
    
    moderation_service = ModerationService(bot)
    success = await moderation_service.reject_post(post_id)
    
    if success:
        await callback.answer("–ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—á–µ—Ä–µ–¥–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        await show_moderation_queue(callback)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏", show_alert=True)

# –£–î–ê–õ–Ø–ï–ú –°–¢–ê–†–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
# –í—Å–µ –∫–Ω–æ–ø–∫–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç edit_post_, request_edit_ –∏ —Ç.–¥.
# 
# @router.callback_query(F.data.startswith("edit_") & ~F.data.startswith("edit_post_") & ~F.data.startswith("edit_date_") & ~F.data.startswith("edit_name_") & ~F.data.startswith("edit_location_") & ~F.data.startswith("edit_coords_"))
# async def old_edit_handler(callback: CallbackQuery, bot: Bot):
#     """–£–î–ê–õ–ï–ù - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω"""
#     pass

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Å–∫—Ä—ã—Ç—ã–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
@router.message(Command("stats"))
async def show_stats_command(message: Message):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    stats = PostService.get_statistics()
    
    stats_text = (
        f"–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê\n\n"
        f"–ü–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {stats['total_posts']}\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}"
    )
    
    await message.answer(stats_text)

@router.message(Command("myid"))
async def get_my_id_command(message: Message):
    """–ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID"""
    user_info = (
        f"–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        f"Telegram ID: {message.from_user.id}\n"
        f"Username: @{message.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ò–º—è: {message.from_user.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin(message.from_user.id) else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
    )
    
    await message.answer(user_info)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π - –ù–ï –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫!
@router.message(EditPostStates.edit_date)
@router.message(EditPostStates.edit_location_name)  
@router.message(EditPostStates.edit_location_description)
@router.message(EditPostStates.edit_coordinates)
async def handle_admin_non_text_in_edit_states(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ù–ï-—Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not is_admin(message.from_user.id):
        return
    
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ –ø—Ä–∏—Å–ª–∞–ª –Ω–µ —Ç–µ–∫—Å—Ç
    if current_state and str(current_state).startswith('EditPostStates') and message.content_type != 'text':
        await message.answer(
            "‚ùå –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å'."
        )
        return