// <auto-generated />
using System.Collections.Generic;
using DBShared;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DBShared.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20251021124347_CreatePlaceVectorsTable")]
    partial class CreatePlaceVectorsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DBShared.Models.FishType", b =>
                {
                    b.Property<int>("IdFishType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdFishType"));

                    b.Property<string>("FishName")
                        .HasColumnType("text");

                    b.HasKey("IdFishType");

                    b.HasIndex("FishName")
                        .IsUnique();

                    b.ToTable("FishType");
                });

            modelBuilder.Entity("DBShared.Models.FishingPlaceFish", b =>
                {
                    b.Property<int>("IdFishingPlace")
                        .HasColumnType("integer");

                    b.Property<int>("IdFishType")
                        .HasColumnType("integer");

                    b.HasKey("IdFishingPlace", "IdFishType");

                    b.HasIndex("IdFishType");

                    b.ToTable("FishingPlaceFish");
                });

            modelBuilder.Entity("DBShared.Models.FishingPlaceWater", b =>
                {
                    b.Property<int>("IdFishingPlace")
                        .HasColumnType("integer");

                    b.Property<int>("IdWaterType")
                        .HasColumnType("integer");

                    b.HasKey("IdFishingPlace", "IdWaterType");

                    b.HasIndex("IdWaterType");

                    b.ToTable("FishingPlaceWater");
                });

            modelBuilder.Entity("DBShared.Models.PlaceVectors", b =>
                {
                    b.Property<int>("IdVector")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdVector"));

                    b.Property<int>("IdPlace")
                        .HasColumnType("integer");

                    b.Property<List<float>>("NameEmbedding")
                        .HasColumnType("jsonb");

                    b.Property<List<float>>("PreferencesEmbedding")
                        .HasColumnType("jsonb");

                    b.HasKey("IdVector");

                    b.HasIndex("IdPlace")
                        .IsUnique();

                    b.ToTable("PlaceVectors");
                });

            modelBuilder.Entity("DBShared.Models.Places", b =>
                {
                    b.Property<int>("IdPlace")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPlace"));

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("PlaceDescription")
                        .HasColumnType("text");

                    b.Property<string>("PlaceName")
                        .HasColumnType("text");

                    b.Property<string>("PlaceType")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("UserPreferences")
                        .HasColumnType("text[]");

                    b.HasKey("IdPlace");

                    b.HasIndex("IdPlace")
                        .IsUnique();

                    b.ToTable("Places");
                });

            modelBuilder.Entity("DBShared.Models.Regions", b =>
                {
                    b.Property<int>("IdRegions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRegions"));

                    b.Property<string>("RegionName")
                        .HasColumnType("text");

                    b.HasKey("IdRegions");

                    b.HasIndex("RegionName")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DBShared.Models.TgMessages", b =>
                {
                    b.Property<int>("IdTgMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTgMessage"));

                    b.Property<bool>("IsProcessed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<string>("MessageText")
                        .HasColumnType("text");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionIdRegions")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("text");

                    b.HasKey("IdTgMessage");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.HasIndex("PlaceId");

                    b.HasIndex("RegionIdRegions");

                    b.ToTable("TgMessages");
                });

            modelBuilder.Entity("DBShared.Models.TgPhotos", b =>
                {
                    b.Property<int>("IdTgPhotos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTgPhotos"));

                    b.Property<int>("IdTgMessage")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("IdTgPhotos");

                    b.HasIndex("IdTgMessage");

                    b.ToTable("TgPhotos");
                });

            modelBuilder.Entity("DBShared.Models.WaterType", b =>
                {
                    b.Property<int>("IdWaterType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdWaterType"));

                    b.Property<string>("WaterName")
                        .HasColumnType("text");

                    b.HasKey("IdWaterType");

                    b.HasIndex("WaterName")
                        .IsUnique();

                    b.ToTable("WaterType");
                });

            modelBuilder.Entity("DBShared.Models.FishingPlaceFish", b =>
                {
                    b.HasOne("DBShared.Models.FishType", "FishType")
                        .WithMany("FishingPlaceFishes")
                        .HasForeignKey("IdFishType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBShared.Models.Places", "FishingPlace")
                        .WithMany("FishingPlaceFishes")
                        .HasForeignKey("IdFishingPlace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishType");

                    b.Navigation("FishingPlace");
                });

            modelBuilder.Entity("DBShared.Models.FishingPlaceWater", b =>
                {
                    b.HasOne("DBShared.Models.Places", "FishingPlaces")
                        .WithMany("FishingPlaceWaters")
                        .HasForeignKey("IdFishingPlace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DBShared.Models.WaterType", "WaterType")
                        .WithMany("FishingPlaceWaters")
                        .HasForeignKey("IdWaterType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishingPlaces");

                    b.Navigation("WaterType");
                });

            modelBuilder.Entity("DBShared.Models.PlaceVectors", b =>
                {
                    b.HasOne("DBShared.Models.Places", "Place")
                        .WithOne("PlaceVectors")
                        .HasForeignKey("DBShared.Models.PlaceVectors", "IdPlace")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("DBShared.Models.TgMessages", b =>
                {
                    b.HasOne("DBShared.Models.Places", "Place")
                        .WithMany("Messages")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DBShared.Models.Regions", "Region")
                        .WithMany("Messages")
                        .HasForeignKey("RegionIdRegions")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Place");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("DBShared.Models.TgPhotos", b =>
                {
                    b.HasOne("DBShared.Models.TgMessages", "Messages")
                        .WithMany("Photos")
                        .HasForeignKey("IdTgMessage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DBShared.Models.FishType", b =>
                {
                    b.Navigation("FishingPlaceFishes");
                });

            modelBuilder.Entity("DBShared.Models.Places", b =>
                {
                    b.Navigation("FishingPlaceFishes");

                    b.Navigation("FishingPlaceWaters");

                    b.Navigation("Messages");

                    b.Navigation("PlaceVectors");
                });

            modelBuilder.Entity("DBShared.Models.Regions", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DBShared.Models.TgMessages", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("DBShared.Models.WaterType", b =>
                {
                    b.Navigation("FishingPlaceWaters");
                });
#pragma warning restore 612, 618
        }
    }
}
