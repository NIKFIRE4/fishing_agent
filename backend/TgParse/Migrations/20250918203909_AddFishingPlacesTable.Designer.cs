// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TgParse.Data;

#nullable disable

namespace TgParse.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250918203909_AddFishingPlacesTable")]
    partial class AddFishingPlacesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TgParse.Models.FishType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FishType");
                });

            modelBuilder.Entity("TgParse.Models.FishingPlaceFish", b =>
                {
                    b.Property<int>("FishingPlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("FishTypeId")
                        .HasColumnType("integer");

                    b.HasKey("FishingPlaceId", "FishTypeId");

                    b.HasIndex("FishTypeId");

                    b.ToTable("FishingPlaceFish");
                });

            modelBuilder.Entity("TgParse.Models.FishingPlaceWater", b =>
                {
                    b.Property<int>("FishingPlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("WaterTypeId")
                        .HasColumnType("integer");

                    b.HasKey("FishingPlaceId", "WaterTypeId");

                    b.HasIndex("WaterTypeId");

                    b.ToTable("FishingPlaceWater");
                });

            modelBuilder.Entity("TgParse.Models.FishingPlaces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CaughtFishes")
                        .HasColumnType("text");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PlaceDescription")
                        .HasColumnType("text");

                    b.Property<string>("WaterPlace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("FishingPlaces");
                });

            modelBuilder.Entity("TgParse.Models.TgMessages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<string>("MessageText")
                        .HasColumnType("text");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<string>("СhannelUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.HasIndex("PlaceId");

                    b.ToTable("TgMessages");
                });

            modelBuilder.Entity("TgParse.Models.TgPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("TgPhotos");
                });

            modelBuilder.Entity("TgParse.Models.WaterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WaterType");
                });

            modelBuilder.Entity("TgParse.Models.FishingPlaceFish", b =>
                {
                    b.HasOne("TgParse.Models.FishType", "FishType")
                        .WithMany("FishingPlaceFishes")
                        .HasForeignKey("FishTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TgParse.Models.FishingPlaces", "FishingPlace")
                        .WithMany("FishingPlaceFishes")
                        .HasForeignKey("FishingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishType");

                    b.Navigation("FishingPlace");
                });

            modelBuilder.Entity("TgParse.Models.FishingPlaceWater", b =>
                {
                    b.HasOne("TgParse.Models.FishingPlaces", "FishingPlaces")
                        .WithMany("FishingPlaceWaters")
                        .HasForeignKey("WaterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TgParse.Models.WaterType", "WaterType")
                        .WithMany("FishingPlaceWaters")
                        .HasForeignKey("WaterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishingPlaces");

                    b.Navigation("WaterType");
                });

            modelBuilder.Entity("TgParse.Models.TgMessages", b =>
                {
                    b.HasOne("TgParse.Models.FishingPlaces", "Place")
                        .WithMany("Messages")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TgParse.Models.TgPhotos", b =>
                {
                    b.HasOne("TgParse.Models.TgMessages", "Message")
                        .WithMany("Photos")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("TgParse.Models.FishType", b =>
                {
                    b.Navigation("FishingPlaceFishes");
                });

            modelBuilder.Entity("TgParse.Models.FishingPlaces", b =>
                {
                    b.Navigation("FishingPlaceFishes");

                    b.Navigation("FishingPlaceWaters");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TgParse.Models.TgMessages", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("TgParse.Models.WaterType", b =>
                {
                    b.Navigation("FishingPlaceWaters");
                });
#pragma warning restore 612, 618
        }
    }
}
