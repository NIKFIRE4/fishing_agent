
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiohttp
from aiogram import types
from aiogram.types import InputMediaPhoto, InputFile, CallbackQuery, FSInputFile
from dotenv import load_dotenv
from typing import Optional, List, Dict
import logging
import asyncio
from ML_integration import MLServiceClient, generate_yandex_maps_url
import os
from urllib.parse import quote
from database.requests import get_or_create_user, save_selected_spot, get_user_fishing_history

# –ò–ú–ü–û–†–¢ –ö–ê–õ–ï–ù–î–ê–†–Ø
from aiogram_calendar import SimpleCalendarCallback, SimpleCalendar
from datetime import datetime, date, timedelta

load_dotenv()
logger = logging.getLogger(__name__)

start_router = Router()

ML_SERVICE_URL = os.getenv("ML_SERVICE_URL") 
ml_client = MLServiceClient(ML_SERVICE_URL)

class SearchStates(StatesGroup):
    waiting_for_search_request = State()
    browsing_spots = State()
    selecting_date = State()  # –ù–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –î–õ–Ø –í–´–ë–û–†–ê –î–ê–¢–´

def get_spot_navigation_keyboard(current_index: int, total_spots: int, spot_id: str = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—Ç–∞–º"""
    buttons = []
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", 
            callback_data=f"spot_nav:prev:{current_index}"
        ))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
    nav_buttons.append(InlineKeyboardButton(
        text=f"{current_index + 1}/{total_spots}",
        callback_data="spot_info"
    ))
    
    if current_index < total_spots - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è", 
            callback_data=f"spot_nav:next:{current_index}"
        ))
    
    buttons.append(nav_buttons)
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –¥–µ–π—Å—Ç–≤–∏—è
    action_buttons = []
    if spot_id:
        action_buttons.append(InlineKeyboardButton(
            text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ", 
            callback_data=f"spot_select:{spot_id}:{current_index}"
        ))
    
    action_buttons.append(InlineKeyboardButton(
        text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", 
        callback_data="new_search"
    ))
    
    buttons.append(action_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def format_spot_description(spot: Dict, user_coords: List[float] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = f"üé£ <b>{spot['name']}</b>\n\n"
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    coordinates = spot.get('coordinates', [])
    if coordinates and len(coordinates) >= 2:
        lat, lon = coordinates[0], coordinates[1]
        text += f"üìç <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {lat:.6f}, {lon:.6f}\n"
    
    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    if spot.get('distance_km') is not None:
        text += f"üöó <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {spot['distance_km']:.1f} –∫–º\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–±–µ –∏ –≤–æ–¥–æ–µ–º–µ
    short_desc = spot.get('short_description', {})
    if isinstance(short_desc, dict):
        if short_desc.get('fish_types'):
            fish_list = ', '.join(short_desc['fish_types'])
            text += f"üêü <b>–†—ã–±–∞:</b> {fish_list}\n"
        if short_desc.get('water_type'):
            text += f"üåä <b>–¢–∏–ø –≤–æ–¥–æ–µ–º–∞:</b> {short_desc['water_type']}\n"
    
    text += "\n"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞
    description = spot.get('description', '')
    if description:
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç
    if user_coords and coordinates:
        maps_url = generate_yandex_maps_url(user_coords, coordinates, spot['name'])
        if maps_url:
            text += f"üó∫Ô∏è <a href='{maps_url}'>–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>\n"
    
    return text

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
def get_start_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")],
            [KeyboardButton(text="üìö –ò—Å—Ç–æ—Ä–∏—è –º–µ—Å—Ç")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

@start_router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üé£\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FishAgent ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        reply_markup=get_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û –Ω–∞—Å" - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
@start_router.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ "–û –Ω–∞—Å"
    await message.answer(
        "‚ÑπÔ∏è <b>–û FishAgent</b>\n\n"
        "üé£ FishAgent ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç —Ä—ã–±–∞–ª–∫–∏.\n\n"
        "ü§ñ –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–¥–æ–µ–º–æ–≤.\n\n"
        "üåä –í –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç—ã—Å—è—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.\n\n"
        "üì± –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ, –∏ –º—ã –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–∞—Å!\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Ä—ã–±–∞–∫–æ–≤\n\n"
        "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ "
        '<a href="https://t.me/fish_agent">–Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ</a>!',
        parse_mode='HTML',
        reply_markup=get_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç" - –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è  
@start_router.message(F.text == "üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç")
async def start_search(message: Message, state: FSMContext):
    try:
        await get_or_create_user(
            tg_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥: {e}")
    await state.set_state(SearchStates.selecting_date)
    await message.answer(
        "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π —Ä—ã–±–∞–ª–∫–∏. "
        "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, "
        "—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å."
    )
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    calendar_markup = await SimpleCalendar().start_calendar()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar_markup)
    await state.set_state(SearchStates.waiting_for_search_request)
    await message.answer(
        "üé£ <b>–ü–æ–∏—Å–∫ –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ —Ä—ã–±–∞–ª–∫–µ, –≤–∫–ª—é—á–∞—è:\n\n"
        "üêü <b>–¶–µ–ª–µ–≤—É—é —Ä—ã–±—É</b> ‚Äî –∫–∞–∫—É—é —Ä—ã–±—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–π–º–∞—Ç—å\n"
        "üìç <b>–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> ‚Äî –æ—Ç–∫—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–µ–∑–∂–∞—Ç—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞)\n"
        "üåä <b>–¢–∏–ø –≤–æ–¥–æ–µ–º–∞</b> ‚Äî —Ä–µ–∫–∞, –æ–∑–µ—Ä–æ, –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–ª–∏ –¥—Ä—É–≥–æ–µ\n"
        "‚è∞ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</b> ‚Äî —É—Å–ª–æ–≤–∏—è –ª–æ–≤–ª–∏, –ø–µ—à–∫–æ–º –∏–ª–∏ –Ω–∞ –º–∞—à–∏–Ω–µ –∏ —Ç.–¥.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: ¬´–•–æ—á—É –ø–æ–π–º–∞—Ç—å —â—É–∫—É, –≤—ã–µ–∑–∂–∞—é –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –ê–≤—Ç–æ–≤–æ, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä–µ–∫–∏, –ø–ª–∞–Ω–∏—Ä—É—é —Ä—ã–±–∞–ª–∫—É –Ω–∞ —Å–ø–∏–Ω–Ω–∏–Ω–≥¬ª</i>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
        parse_mode='HTML'
    )

@start_router.message(F.text == "üìö –ò—Å—Ç–æ—Ä–∏—è –º–µ—Å—Ç")
async def show_history_from_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ò—Å—Ç–æ—Ä–∏—è –º–µ—Å—Ç' –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    try:
        history = await get_user_fishing_history(message.from_user.id, limit=10)
        
        if not history:
            await message.answer(
                "üìö <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏.\n"
                "–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ!",
                parse_mode='HTML'
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏
        history_text = "üìö <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫</b>\n\n"
        
        for i, spot in enumerate(history, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = spot.selected_at.strftime("%d.%m.%Y %H:%M")
            
            history_text += f"<b>{i}. {spot.spot_name}</b>\n"
            history_text += f"üìÖ {date_str}\n"
            
            # –ü–û–ö–ê–ó–´–í–ê–ï–ú –î–ê–¢–£ –†–´–ë–ê–õ–ö–ò –ï–°–õ–ò –ï–°–¢–¨
            if spot.fishing_date:
                fishing_date_str = spot.fishing_date.strftime("%d.%m.%Y")
                history_text += f"üé£ –î–∞—Ç–∞ —Ä—ã–±–∞–ª–∫–∏: <b>{fishing_date_str}</b>\n"
            
            if spot.user_query:
                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                short_query = spot.user_query[:50] + "..." if len(spot.user_query) > 50 else spot.user_query
                history_text += f"üîç –ó–∞–ø—Ä–æ—Å: <i>{short_query}</i>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            if spot.spot_coordinates:
                coords = spot.spot_coordinates.split(',')
                if len(coords) == 2:
                    history_text += f"üó∫ <a href='https://yandex.ru/maps/?pt={coords[1]},{coords[0]}&z=15&l=map'>–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>\n"
            
            history_text += "\n"
        
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –¥–ª–∏–Ω–Ω–∞—è, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(history_text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø–∏—Å—è–º
            parts = history_text.split('\n\n')
            current_part = "üìö <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫</b>\n\n"
            
            for part in parts[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(current_part + part + '\n\n') > 4000:
                    await message.answer(current_part, parse_mode='HTML')
                    current_part = part + '\n\n'
                else:
                    current_part += part + '\n\n'
            
            if current_part.strip():
                await message.answer(current_part, parse_mode='HTML')
        else:
            await message.answer(history_text, parse_mode='HTML')
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        await message.answer(
            f"–í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: <b>{len(history)}</b>\n"
            f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–µ–∑–¥–∫–∞: <b>{history[0].selected_at.strftime('%d.%m.%Y')}</b>",
            parse_mode='HTML'
        )
        
    except Exception as e:
        logger.error(f"Error showing history from menu: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¢–û–õ–¨–ö–û –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@start_router.message(SearchStates.waiting_for_search_request, F.text)
async def process_search_request(message: Message, state: FSMContext):
    user_request = message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    processing_msg = await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞...")
    
    # –í—ã–∑—ã–≤–∞–µ–º ML —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç
    result = await ml_client.search_fishing_spots(
        user_id=message.from_user.id,
        query=user_request
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    await processing_msg.delete()
    
    if result.get("success"):
        spots = result.get("spots", [])
        if spots:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_coords = None
            if spots and spots[0].get("location_user"):
                user_coords = spots[0]["location_user"]
            
            await state.update_data(
                spots=spots,
                current_index=0,
                user_coordinates=user_coords,
                user_query=user_request
            )
            await state.set_state(SearchStates.browsing_spots)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
            await show_spot(message, spots[0], 0, len(spots), user_coords, state)
        else:
            await message.answer(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=get_start_keyboard()
            )
    else:
        error_msg = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error_msg}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
            reply_markup=get_start_keyboard()
        )
    
    if not result.get("success") or not result.get("spots"):
        await state.clear()

async def show_spot(message_or_callback, spot: dict, current_index: int, total_spots: int,
                    user_coords: list = None, state: FSMContext = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ —Ä—ã–±–∞–ª–∫–∏ —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
        if isinstance(message_or_callback, CallbackQuery):
            chat_id = message_or_callback.message.chat.id
            bot_instance = message_or_callback.bot
            user_id = message_or_callback.from_user.id
        else:  # Message
            chat_id = message_or_callback.chat.id
            bot_instance = message_or_callback.bot
            user_id = message_or_callback.from_user.id
        
        logger.info(f"Showing spot #{current_index+1}/{total_spots} for user {user_id}: {spot.get('name')}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        description = format_spot_description(spot, user_coords)
        spot_id = spot.get('id', str(current_index))
        keyboard = get_spot_navigation_keyboard(current_index, total_spots, spot_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏
        photos = spot.get('photos') or spot.get('images') or []
        logger.debug(f"Found {len(photos)} photos for spot")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
        if not photos:
            logger.warning("No photos found, using fallback image")
            photos = [r"C:\Users\user\Desktop\projects\fishing_agent\TG_bot\4474172e-20de-4264-aafa-a94c66abd7b2.png", r"C:\Users\user\Desktop\projects\fishing_agent\TG_bot\ecaecf1e-ce43-4d72-9555-7b83d73dabe5.png", r"C:\Users\user\Desktop\projects\fishing_agent\TG_bot\i-_3_.png"]
        
        # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ
        selected_photos = photos[:3]
        logger.debug(f"Selected {len(selected_photos)} photos for display")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç—ã
        media_items = []
        for idx, photo in enumerate(selected_photos):
            try:
                # –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
                if isinstance(photo, str) and os.path.isfile(photo):
                    logger.debug(f"Using local file: {photo}")
                    media = InputMediaPhoto(media=FSInputFile(photo))
                
                # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                elif isinstance(photo, str) and photo.startswith(('http://', 'https://')):
                    logger.debug(f"Using URL: {photo}")
                    media = InputMediaPhoto(media=photo)
                
                # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                else:
                    logger.warning(f"Unsupported photo format: {type(photo)} - {str(photo)[:50]}")
                    continue
                
                # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                if idx == 0:
                    media.caption = description
                    media.parse_mode = 'HTML'
                
                media_items.append(media)
            except Exception as e:
                logger.error(f"Error preparing media #{idx}: {str(e)}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ–¥–∏–∞-–æ–±—ä–µ–∫—Ç–∞
        if not media_items:
            logger.error("No valid media items prepared, using text fallback")
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            text_message = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n\n{description}"
            media_items = None
        else:
            text_message = None
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        state_data = await state.get_data() if state else {}
        last_message_ids = state_data.get('last_message_ids', [])
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
        if last_message_ids:
            logger.debug(f"Deleting {len(last_message_ids)} previous messages")
            for msg_id in last_message_ids:
                try:
                    await bot_instance.delete_message(chat_id, msg_id)
                except Exception as e:
                    logger.warning(f"Error deleting message {msg_id}: {str(e)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_message_ids = []
        
        try:
            if media_items:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                logger.info(f"Sending media group with {len(media_items)} items")
                media_messages = await bot_instance.send_media_group(chat_id, media_items)
                new_message_ids = [msg.message_id for msg in media_messages]
                logger.info(f"Media group sent with IDs: {new_message_ids}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                keyboard_msg = await bot_instance.send_message(
                    chat_id, 
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                    reply_markup=keyboard
                )
                new_message_ids.append(keyboard_msg.message_id)
                logger.info(f"Keyboard message ID: {keyboard_msg.message_id}")
            
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                logger.warning("Sending text fallback message")
                fallback_msg = await bot_instance.send_message(
                    chat_id,
                    text_message,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
                new_message_ids.append(fallback_msg.message_id)
            
            logger.info(f"Total new messages: {len(new_message_ids)}")
        
        except Exception as e:
            logger.error(f"Error sending messages: {str(e)}")
            
            # –§–æ–ª–ª–±—ç–∫: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            try:
                logger.error("Trying minimal text fallback")
                error_msg = await bot_instance.send_message(
                    chat_id,
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ.",
                    reply_markup=keyboard
                )
                new_message_ids.append(error_msg.message_id)
            except Exception as ex:
                logger.critical(f"Complete fallback failure: {ex}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤—ã–º–∏ ID —Å–æ–æ–±—â–µ–Ω–∏–π
        if state:
            await state.update_data(last_message_ids=new_message_ids)
    
    except Exception as e:
        logger.critical(f"Critical error in show_spot: {str(e)}")
        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if isinstance(message_or_callback, CallbackQuery):
                await message_or_callback.message.answer(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_start_keyboard()
                )
            else:
                await message_or_callback.answer(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=get_start_keyboard()
                )
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@start_router.callback_query(F.data.startswith("spot_nav:"))
async def handle_spot_navigation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    data = await state.get_data()
    spots = data.get('spots', [])
    user_coords = data.get('user_coordinates')
    
    if not spots:
        await callback.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
        await state.clear()
        return
    
    # –ü–∞—Ä—Å–∏–º callback data
    _, direction, current_index_str = callback.data.split(":")
    current_index = int(current_index_str)
    
    if direction == "prev" and current_index > 0:
        new_index = current_index - 1
    elif direction == "next" and current_index < len(spots) - 1:
        new_index = current_index + 1
    else:
        return  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_index=new_index)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
    await show_spot(callback, spots[new_index], new_index, len(spots), user_coords, state)


@start_router.callback_query(F.data.startswith("spot_select:"))
async def handle_spot_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()

    data = await state.get_data()
    spots = data.get('spots', [])
    user_query = data.get('user_query', '')
    user_coordinates = data.get('user_coordinates')
    fishing_date = data.get('fishing_date')  # –ø–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –¥–∞—Ç—É

    # –ü–∞—Ä—Å–∏–º callback data
    _, spot_id, index_str = callback.data.split(":")
    index = int(index_str)

    if index < len(spots):
        selected_spot = spots[index]
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ —Å –¥–∞—Ç–æ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await save_selected_spot(
                tg_id=callback.from_user.id,
                spot_data=selected_spot,
                user_query=user_query,
                user_coordinates=user_coordinates,
                fishing_date=fishing_date  # –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞—Ç—É
            )
            logger.info(
                f"Saved selected spot for user {callback.from_user.id}: "
                f"{selected_spot.get('name')} on {fishing_date}"
            )
        except Exception as e:
            logger.error(f"Error saving selected spot: {e}")

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")],
            [InlineKeyboardButton(text="üìö –ò—Å—Ç–æ—Ä–∏—è –º–µ—Å—Ç", callback_data="show_history")]
        ])
        date_str = fishing_date.strftime('%d.%m.%Y') if fishing_date else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
        await callback.message.edit_text(
            f"‚úÖ <b>–ú–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{selected_spot['name']}</b>\n"
            f"üìÖ –î–∞—Ç–∞: <b>{date_str}</b>\n\n"
            f"üé£ –£–¥–∞—á–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏!",
            parse_mode='HTML',
            reply_markup=keyboard
        )
    await state.clear()


# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ê–õ–ï–ù–î–ê–†–Ø: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–µ –ø–∏—à–µ–º –≤ –ë–î
@start_router.callback_query(SimpleCalendarCallback.filter())
async def process_calendar_selection(callback: CallbackQuery,
                                     callback_data: SimpleCalendarCallback,
                                     state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
    selected, selected_date = await SimpleCalendar().process_selection(callback, callback_data)
    if not selected:
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø –¥–∞—Ç—ã –∫ datetime.date
    if isinstance(selected_date, datetime):
        selected_date = selected_date.date()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
    if selected_date < date.today():
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ –ø—Ä–æ—à–ª–æ–º!", show_alert=True)
        today = date.today()
        calendar_markup = await SimpleCalendar().start_calendar(year=today.year, month=today.month)
        try:
            await callback.message.edit_reply_markup(reply_markup=calendar_markup)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(fishing_date=selected_date)
    await callback.answer(f"–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {selected_date.strftime('%d.%m.%Y')}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    try:
        await callback.message.delete()
    except Exception:
        pass
    await state.set_state(SearchStates.waiting_for_search_request)
    await callback.message.answer(
        "üé£ <b>–ü–æ–∏—Å–∫ –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ —Ä—ã–±–∞–ª–∫–µ, –≤–∫–ª—é—á–∞—è:\n\n"
        "üêü <b>–¶–µ–ª–µ–≤—É—é —Ä—ã–±—É</b> ‚Äî –∫–∞–∫—É—é —Ä—ã–±—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–π–º–∞—Ç—å\n"
        "üìç <b>–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> ‚Äî –æ—Ç–∫—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–µ–∑–∂–∞—Ç—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞)\n"
        "üåä <b>–¢–∏–ø –≤–æ–¥–æ–µ–º–∞</b> ‚Äî —Ä–µ–∫–∞, –æ–∑–µ—Ä–æ, –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–ª–∏ –¥—Ä—É–≥–æ–µ\n"
        "‚è∞ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</b> ‚Äî —É—Å–ª–æ–≤–∏—è –ª–æ–≤–ª–∏, –ø–µ—à–∫–æ–º –∏–ª–∏ –Ω–∞ –º–∞—à–∏–Ω–µ –∏ —Ç.–¥.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: ¬´–•–æ—á—É –ø–æ–π–º–∞—Ç—å —â—É–∫—É, –≤—ã–µ–∑–∂–∞—é –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –ê–≤—Ç–æ–≤–æ, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä–µ–∫–∏, –ø–ª–∞–Ω–∏—Ä—É—é —Ä—ã–±–∞–ª–∫—É –Ω–∞ —Å–ø–∏–Ω–Ω–∏–Ω–≥¬ª</i>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
        parse_mode='HTML'
    )

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ü–û–ö–ê–ó–ê –ò–°–¢–û–†–ò–ò –ò–ó INLINE –ö–ù–û–ü–ö–ò
@start_router.callback_query(F.data == "show_history")
async def handle_show_history_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–∫–∏ '–ú–æ—è –∏—Å—Ç–æ—Ä–∏—è'"""
    await callback.answer()
    
    try:
        history = await get_user_fishing_history(callback.from_user.id, limit=10)
        
        if not history:
            await callback.message.edit_text(
                "üìö <b>–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–µ–∑–¥–æ–∫</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏.\n"
                "–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ!",
                parse_mode='HTML',
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")]
                ])
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –¥–ª—è inline)
        history_text = "üìö <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏</b>\n\n"
        
        for i, spot in enumerate(history[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            date_str = spot.selected_at.strftime("%d.%m")
            history_text += f"<b>{i}. {spot.spot_name}</b>\n"
            
            if spot.fishing_date:
                fishing_date_str = spot.fishing_date.strftime("%d.%m.%Y")
                history_text += f"üé£ {fishing_date_str}\n"
            else:
                history_text += f"üìÖ {date_str}\n"
            
            history_text += "\n"
        
        if len(history) > 5:
            history_text += f"–ò –µ—â–µ {len(history) - 5} –ø–æ–µ–∑–¥–æ–∫...\n\n"
        
        history_text += "–ü–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –±–æ—Ç–∞."
        
        await callback.message.edit_text(
            history_text,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üé£ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="start_search")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"Error showing history from callback: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="show_history")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
@start_router.callback_query(F.data == "new_search")
async def handle_new_search(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        "üé£ –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç", callback_data="start_search")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about_us")]
        ])
    )

@start_router.callback_query(F.data == "start_search")
async def handle_start_search_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    await state.set_state(SearchStates.selecting_date)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
    await callback.message.answer(
        "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–π –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π —Ä—ã–±–∞–ª–∫–∏. "
        "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, "
        "—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å."
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    calendar_markup = await SimpleCalendar().start_calendar()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=calendar_markup)

@start_router.callback_query(F.data == "about_us")
async def handle_about_us_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ "–û –Ω–∞—Å"
    
    await callback.message.edit_text(
        "‚ÑπÔ∏è <b>–û FishAgent</b>\n\n"
        "üé£ FishAgent ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç —Ä—ã–±–∞–ª–∫–∏.\n\n"
        "ü§ñ –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–¥–æ–µ–º–æ–≤.\n\n"
        "üåä –í –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç—ã—Å—è—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.\n\n"
        "üì± –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ, –∏ –º—ã –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–∞—Å!\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Ä—ã–±–∞–∫–æ–≤\n\n"
        "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ "
        '<a href="https://t.me/fish_agent">–Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ</a>!\n\n'
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç", callback_data="start_search")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

@start_router.callback_query(F.data == "main_menu")
async def handle_main_menu_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç", callback_data="start_search")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about_us")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@start_router.message(F.text.in_(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/menu"]))
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        reply_markup=get_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è callback'–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∑–∏—Ü–∏–∏
@start_router.callback_query(F.data == "spot_info")
async def handle_spot_info(callback: CallbackQuery):
    await callback.answer("‚ÑπÔ∏è –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–≥–¥–∞ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∏—Å–∫–∞)
@start_router.message(F.text)
async def handle_other_text(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∏—Å–∫–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
    if current_state != SearchStates.waiting_for_search_request:
        await message.answer(
            "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç —Ä—ã–±–∞–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç¬ª, "
            "–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ ‚Äî ¬´‚ÑπÔ∏è –û –Ω–∞—Å¬ª.",
            reply_markup=get_start_keyboard()
        )


