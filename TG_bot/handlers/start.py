from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiohttp
import asyncio
from dotenv import load_dotenv
from typing import Optional, List, Dict
import logging
import os
from urllib.parse import quote

load_dotenv()
logger = logging.getLogger(__name__)

start_router = Router()

class SearchStates(StatesGroup):
    waiting_for_search_request = State()
    browsing_spots = State()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ML —Å–µ—Ä–≤–∏—Å–∞
ML_SERVICE_URL = os.getenv("ML_SERVICE_URL") 

class MLServiceClient:
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.timeout = aiohttp.ClientTimeout(total=30)
    
    async def search_fishing_spots(self, user_id: int, query: str) -> dict:
        """–í—ã–∑–æ–≤ –≤–∞—à–µ–≥–æ ML —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç —Ä—ã–±–∞–ª–∫–∏"""
        url = f"{self.base_url}/telegram/search"
        
        payload = {
            "user_id": user_id,
            "query": query,
        }
        
        try:
            async with aiohttp.ClientSession(timeout=self.timeout) as session:
                async with session.post(url, json=payload) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        logger.error(f"ML service error: {response.status} - {error_text}")
                        return {"success": False, "message": "Service unavailable"}
        except asyncio.TimeoutError:
            logger.error("ML service timeout")
            return {"success": False, "message": "Service timeout"}
        except Exception as e:
            logger.error(f"ML service connection error: {str(e)}")
            return {"success": False, "message": "Connection error"}
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ ML —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=5)) as session:
                async with session.get(f"{self.base_url}/health") as response:
                    return response.status == 200
        except:
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ML —Å–µ—Ä–≤–∏—Å–∞
ml_client = MLServiceClient(ML_SERVICE_URL)

def generate_yandex_maps_url(from_coords: List[float], to_coords: List[float], to_name: str = "–ú–µ—Å—Ç–æ —Ä—ã–±–∞–ª–∫–∏") -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö"""
    if not from_coords or not to_coords or len(from_coords) < 2 or len(to_coords) < 2:
        return None
    
    # –§–æ—Ä–º–∞—Ç: https://yandex.ru/maps/?rtext=–æ—Ç–∫—É–¥–∞~–∫—É–¥–∞&rtt=auto
    from_str = f"{from_coords[0]},{from_coords[1]}"
    to_str = f"{to_coords[0]},{to_coords[1]}"
    
    url = f"https://yandex.ru/maps/?rtext={from_str}~{to_str}&rtt=auto"
    return url

def get_spot_navigation_keyboard(current_index: int, total_spots: int, spot_id: str = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—Ç–∞–º"""
    buttons = []
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", 
            callback_data=f"spot_nav:prev:{current_index}"
        ))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
    nav_buttons.append(InlineKeyboardButton(
        text=f"{current_index + 1}/{total_spots}",
        callback_data="spot_info"
    ))
    
    if current_index < total_spots - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–µ–µ ‚ñ∂Ô∏è", 
            callback_data=f"spot_nav:next:{current_index}"
        ))
    
    buttons.append(nav_buttons)
    
    # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –¥–µ–π—Å—Ç–≤–∏—è
    action_buttons = []
    if spot_id:
        action_buttons.append(InlineKeyboardButton(
            text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ –º–µ—Å—Ç–æ", 
            callback_data=f"spot_select:{spot_id}:{current_index}"
        ))
    
    action_buttons.append(InlineKeyboardButton(
        text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", 
        callback_data="new_search"
    ))
    
    buttons.append(action_buttons)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def format_spot_description(spot: Dict, user_coords: List[float] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = f"üé£ <b>{spot['name']}</b>\n\n"
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    coordinates = spot.get('coordinates', [])
    if coordinates and len(coordinates) >= 2:
        lat, lon = coordinates[0], coordinates[1]
        text += f"üìç <b>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</b> {lat:.6f}, {lon:.6f}\n"
    
    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    if spot.get('distance_km') is not None:
        text += f"üöó <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> {spot['distance_km']:.1f} –∫–º\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä—ã–±–µ –∏ –≤–æ–¥–æ–µ–º–µ
    short_desc = spot.get('short_description', {})
    if isinstance(short_desc, dict):
        if short_desc.get('fish_types'):
            fish_list = ', '.join(short_desc['fish_types'])
            text += f"üêü <b>–†—ã–±–∞:</b> {fish_list}\n"
        if short_desc.get('water_type'):
            text += f"üåä <b>–¢–∏–ø –≤–æ–¥–æ–µ–º–∞:</b> {short_desc['water_type']}\n"
    
    text += "\n"
    
    # –û–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞
    description = spot.get('description', '')
    if description:
        text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{description}\n\n"
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç
    if user_coords and coordinates:
        maps_url = generate_yandex_maps_url(user_coords, coordinates, spot['name'])
        if maps_url:
            text += f"üó∫Ô∏è <a href='{maps_url}'>–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>\n"
    
    return text

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
def get_start_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç")],
            [KeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

@start_router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üé£\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FishAgent ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –∏–¥–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        reply_markup=get_start_keyboard()
    )

@start_router.message(F.text == "üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç")
async def start_search(message: Message, state: FSMContext):
    await state.set_state(SearchStates.waiting_for_search_request)
    await message.answer(
        "üé£ <b>–ü–æ–∏—Å–∫ –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ —Ä—ã–±–∞–ª–∫–µ, –≤–∫–ª—é—á–∞—è:\n\n"
        "üêü <b>–¶–µ–ª–µ–≤—É—é —Ä—ã–±—É</b> ‚Äî –∫–∞–∫—É—é —Ä—ã–±—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–π–º–∞—Ç—å\n"
        "üìç <b>–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> ‚Äî –æ—Ç–∫—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–µ–∑–∂–∞—Ç—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞)\n"
        "üåä <b>–¢–∏–ø –≤–æ–¥–æ–µ–º–∞</b> ‚Äî —Ä–µ–∫–∞, –æ–∑–µ—Ä–æ, –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–ª–∏ –¥—Ä—É–≥–æ–µ\n"
        "‚è∞ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</b> ‚Äî —É—Å–ª–æ–≤–∏—è –ª–æ–≤–ª–∏, –ø–µ—à–∫–æ–º –∏–ª–∏ –Ω–∞ –º–∞—à–∏–Ω–µ –∏ —Ç.–¥.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: ¬´–•–æ—á—É –ø–æ–π–º–∞—Ç—å —â—É–∫—É, –≤—ã–µ–∑–∂–∞—é –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –ê–≤—Ç–æ–≤–æ, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä–µ–∫–∏, –ø–ª–∞–Ω–∏—Ä—É—é —Ä—ã–±–∞–ª–∫—É –Ω–∞ —Å–ø–∏–Ω–Ω–∏–Ω–≥¬ª</i>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
        parse_mode='HTML'
    )

@start_router.message(SearchStates.waiting_for_search_request)
async def process_search_request(message: Message, state: FSMContext):
    user_request = message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    processing_msg = await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞...")
    
    # –í—ã–∑—ã–≤–∞–µ–º ML —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç
    result = await ml_client.search_fishing_spots(
        user_id=message.from_user.id,
        query=user_request
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    await processing_msg.delete()
    
    if result.get("success"):
        spots = result.get("spots", [])
        if spots:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_coords = None
            if spots and spots[0].get("location_user"):
                user_coords = spots[0]["location_user"]
            
            await state.update_data(
                spots=spots,
                current_index=0,
                user_coordinates=user_coords
            )
            await state.set_state(SearchStates.browsing_spots)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ
            await show_spot(message, spots[0], 0, len(spots), user_coords, state)
        else:
            await message.answer(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.",
                reply_markup=get_start_keyboard()
            )
    else:
        error_msg = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {error_msg}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
            reply_markup=get_start_keyboard()
        )
    
    if not result.get("success") or not result.get("spots"):
        await state.clear()

async def show_spot(message_or_callback, spot: Dict, current_index: int, total_spots: int, user_coords: List[float] = None, state: FSMContext = None):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –º–µ—Å—Ç–µ —Ä—ã–±–∞–ª–∫–∏"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞
    description = format_spot_description(spot, user_coords)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    spot_id = spot.get('id', str(current_index))
    keyboard = get_spot_navigation_keyboard(current_index, total_spots, spot_id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–µ—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    photos = spot.get('photos', [])
    
    try:
        if isinstance(message_or_callback, CallbackQuery):
            # –≠—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏
            callback = message_or_callback
            
            if photos:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
                if len(photos) == 1:
                    await callback.message.edit_media(
                        media=InputMediaPhoto(media=photos[0], caption=description, parse_mode='HTML'),
                        reply_markup=keyboard
                    )
                else:
                    # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await callback.message.delete()
                    media_group = [InputMediaPhoto(media=photos[0], caption=description, parse_mode='HTML')]
                    for photo in photos[1:]:
                        media_group.append(InputMediaPhoto(media=photo))
                    
                    messages = await callback.message.answer_media_group(media_group)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            else:
                # –ë–µ–∑ —Ñ–æ—Ç–æ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                await callback.message.edit_text(
                    text=description,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
        else:
            # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = message_or_callback
            
            if photos:
                if len(photos) == 1:
                    await message.answer_photo(
                        photo=photos[0],
                        caption=description,
                        parse_mode='HTML',
                        reply_markup=keyboard
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
                    media_group = [InputMediaPhoto(media=photos[0], caption=description, parse_mode='HTML')]
                    for photo in photos[1:]:
                        media_group.append(InputMediaPhoto(media=photo))
                    
                    await message.answer_media_group(media_group)
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            else:
                # –ë–µ–∑ —Ñ–æ—Ç–æ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                await message.answer(
                    text=description,
                    parse_mode='HTML',
                    reply_markup=keyboard
                )
    except Exception as e:
        logger.error(f"Error showing spot: {e}")
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message_or_callback.message.answer(
            text=description,
            parse_mode='HTML',
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@start_router.callback_query(F.data.startswith("spot_nav:"))
async def handle_spot_navigation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    data = await state.get_data()
    spots = data.get('spots', [])
    user_coords = data.get('user_coordinates')
    
    if not spots:
        await callback.message.edit_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
        await state.clear()
        return
    
    # –ü–∞—Ä—Å–∏–º callback data
    _, direction, current_index_str = callback.data.split(":")
    current_index = int(current_index_str)
    
    if direction == "prev" and current_index > 0:
        new_index = current_index - 1
    elif direction == "next" and current_index < len(spots) - 1:
        new_index = current_index + 1
    else:
        return  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(current_index=new_index)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
    await show_spot(callback, spots[new_index], new_index, len(spots), user_coords, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞
@start_router.callback_query(F.data.startswith("spot_select:"))
async def handle_spot_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    data = await state.get_data()
    spots = data.get('spots', [])
    
    # –ü–∞—Ä—Å–∏–º callback data
    _, spot_id, index_str = callback.data.split(":")
    index = int(index_str)
    
    if index < len(spots):
        selected_spot = spots[index]
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ú–µ—Å—Ç–æ –≤—ã–±—Ä–∞–Ω–æ!</b>\n\n"
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{selected_spot['name']}</b>\n\n"
            f"üé£ –£–¥–∞—á–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏! \n\n"
            f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search")]
            ])
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
@start_router.callback_query(F.data == "new_search")
async def handle_new_search(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        "üé£ –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç", callback_data="start_search")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about_us")]
        ])
    )

@start_router.callback_query(F.data == "start_search")
async def handle_start_search_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    await state.set_state(SearchStates.waiting_for_search_request)
    await callback.message.edit_text(
        "üé£ <b>–ü–æ–∏—Å–∫ –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏</b>\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –æ —Ä—ã–±–∞–ª–∫–µ, –≤–∫–ª—é—á–∞—è:\n\n"
        "üêü <b>–¶–µ–ª–µ–≤—É—é —Ä—ã–±—É</b> ‚Äî –∫–∞–∫—É—é —Ä—ã–±—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–π–º–∞—Ç—å\n"
        "üìç <b>–ú–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b> ‚Äî –æ—Ç–∫—É–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤—ã–µ–∑–∂–∞—Ç—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Å—Ç–∞)\n"
        "üåä <b>–¢–∏–ø –≤–æ–¥–æ–µ–º–∞</b> ‚Äî —Ä–µ–∫–∞, –æ–∑–µ—Ä–æ, –≤–æ–¥–æ—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–ª–∏ –¥—Ä—É–≥–æ–µ\n"
        "‚è∞ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</b> ‚Äî —É—Å–ª–æ–≤–∏—è –ª–æ–≤–ª–∏, –ø–µ—à–∫–æ–º –∏–ª–∏ –Ω–∞ –º–∞—à–∏–Ω–µ –∏ —Ç.–¥.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä: ¬´–•–æ—á—É –ø–æ–π–º–∞—Ç—å —â—É–∫—É, –≤—ã–µ–∑–∂–∞—é –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ –ê–≤—Ç–æ–≤–æ, –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Ä–µ–∫–∏, –ø–ª–∞–Ω–∏—Ä—É—é —Ä—ã–±–∞–ª–∫—É –Ω–∞ —Å–ø–∏–Ω–Ω–∏–Ω–≥¬ª</i>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:",
        parse_mode='HTML'
    )

@start_router.message(F.text == "‚ÑπÔ∏è –û –Ω–∞—Å")
async def about_us(message: Message):
    await message.answer(
        "‚ÑπÔ∏è <b>–û FishAgent</b>\n\n"
        "üé£ FishAgent ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç —Ä—ã–±–∞–ª–∫–∏.\n\n"
        "ü§ñ –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–¥–æ–µ–º–æ–≤.\n\n"
        "üåä –í –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç—ã—Å—è—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.\n\n"
        "üì± –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ, –∏ –º—ã –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–∞—Å!\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Ä—ã–±–∞–∫–æ–≤\n\n"
        "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ "
        '<a href="https://t.me/fish_agent">–Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ</a>!',
        parse_mode='HTML',
        reply_markup=get_start_keyboard()
    )

@start_router.callback_query(F.data == "about_us")
async def handle_about_us_callback(callback: CallbackQuery):
    await callback.answer()
    
    await callback.message.edit_text(
        "‚ÑπÔ∏è <b>–û FishAgent</b>\n\n"
        "üé£ FishAgent ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç —Ä—ã–±–∞–ª–∫–∏.\n\n"
        "ü§ñ –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏ –ø–æ–¥–±–æ—Ä–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–¥–æ–µ–º–æ–≤.\n\n"
        "üåä –í –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ç—ã—Å—è—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä—ã–±–∞–ª–∫–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ.\n\n"
        "üì± –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ, –∏ –º—ã –Ω–∞–π–¥–µ–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –≤–∞—Å!\n\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è –¥–ª—è —Ä—ã–±–∞–∫–æ–≤\n\n"
        "üì¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –≤ "
        '<a href="https://t.me/fish_agent">–Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ</a>!\n\n'
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç", callback_data="start_search")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
    )

@start_router.callback_query(F.data == "main_menu")
async def handle_main_menu_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç", callback_data="start_search")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about_us")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@start_router.message(F.text.in_(["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "/menu"]))
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:",
        reply_markup=get_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è callback'–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∑–∏—Ü–∏–∏
@start_router.callback_query(F.data == "spot_info")
async def handle_spot_info(callback: CallbackQuery):
    await callback.answer("‚ÑπÔ∏è –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞", show_alert=True)