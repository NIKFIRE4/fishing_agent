import os
from dotenv import load_dotenv
import whisper
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram_calendar import SimpleCalendarCallback, SimpleCalendar
from datetime import datetime, date
import logging
from aiogram_calendar.schemas import CalendarLabels
import calendar

from config.settings import MESSAGES, ML_SERVICE_URL
from states.search_states import SearchStates
from keyboards.main_menu import get_start_keyboard
from handlers.navigation import show_spot
from database.requests import get_or_create_user
from ML_integration import MLServiceClient
from utils.voice_processor import process_voice_message, is_voice_available

logger = logging.getLogger(__name__)
search_router = Router()

try:
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper...")
    whisper_model = whisper.load_model("small")  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ "base" –∏–ª–∏ "tiny"
    logger.info("–ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Whisper: {e}")
    whisper_model = None

class RussianCalendar(SimpleCalendar):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # –ü—Ä—è–º–æ –∑–∞–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∏:
        self._labels = CalendarLabels(
            cancel_caption="–û—Ç–º–µ–Ω–∞",
            today_caption="–°–µ–≥–æ–¥–Ω—è",
            days_of_week=["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"],
            months=[
                "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å",
                "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç",
                "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å",
            ],
        )

@search_router.message(F.text == "üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç")
async def start_search(message: Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏–∑ MESSAGES.
    """
    try:
        await get_or_create_user(
            tg_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—ã–±–æ—Ä –¥–∞—Ç—ã
    await state.set_state(SearchStates.selecting_date)
    await message.answer(
        MESSAGES['search']['date_prompt'],
        parse_mode='HTML'
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    calendar_markup = await RussianCalendar().start_calendar()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=calendar_markup
    )

@search_router.callback_query(SimpleCalendarCallback.filter())
async def process_calendar_selection(callback: CallbackQuery,
                                     callback_data: SimpleCalendarCallback,
                                     state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ—à–ª—É—é –¥–∞—Ç—É, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
    """
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–µ–≥–æ–¥–Ω—è"
    if str(callback_data.act) == "SimpleCalAct.today":
        selected_date = date.today()
        selected = True
    else:
        selected, selected_date = await RussianCalendar().process_selection(callback, callback_data)
        
        # –ï—Å–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–±–æ—Ä (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –º–µ—Å—è—Ü—ã/–≥–æ–¥—ã)
        if not selected:
            return

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ç–∏–ø—É date, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ datetime
    if isinstance(selected_date, datetime):
        selected_date = selected_date.date()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
    if selected_date < date.today():
        await callback.answer(
            MESSAGES['search']['past_date_error'], show_alert=True
        )
        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        today = date.today()
        calendar_markup = await RussianCalendar().start_calendar(year=today.year, month=today.month)
        try:
            await callback.message.edit_reply_markup(reply_markup=calendar_markup)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.update_data(fishing_date=selected_date)
    await callback.answer(
        MESSAGES['search']['date_selected'].format(
            date=selected_date.strftime('%d.%m.%Y')
        )
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º
    try:
        await callback.message.delete()
    except Exception:
        pass

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    await state.set_state(SearchStates.waiting_for_search_request)
    request_message = MESSAGES['search']['request_prompt']
    if is_voice_available():
        request_message += "\n\nüé§ <i>–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>"
    
    await callback.message.answer(
        request_message,
        parse_mode='HTML'
    )

async def process_search_query(message: Message, state: FSMContext, user_request: str, processing_msg: Message):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ).
    """
    try:
        ml_client = MLServiceClient(ML_SERVICE_URL)
        result = await ml_client.search_fishing_spots(
            user_id=message.from_user.id,
            query=user_request
        )

        await processing_msg.delete()

        if result.get("success"):
            spots = result.get("spots", [])
            if spots:
                user_coords = spots[0].get("location_user")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
                await state.update_data(
                    spots=spots,
                    current_index=0,
                    user_coordinates=user_coords,
                    user_query=user_request
                )
                await state.set_state(SearchStates.browsing_spots)
                data = await state.get_data()
                selected_date = data.get("fishing_date")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ª–æ–∫–∞—Ü–∏—é
                await show_spot(
                    message, spots[0], 0, len(spots), user_coords, state, selected_date
                )
            else:
                await message.answer(
                    MESSAGES['search']['no_results'],
                    reply_markup=get_start_keyboard()
                )
                await state.clear()
        else:
            error_msg = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            await message.answer(
                MESSAGES['search']['error'].format(error=error_msg),
                reply_markup=get_start_keyboard()
            )
            await state.clear()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        try:
            await processing_msg.delete()
        except:
            pass
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_start_keyboard()
        )
        await state.clear()

# –î–û–ë–ê–í–õ–ï–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
@search_router.message(SearchStates.waiting_for_search_request, F.text)
async def process_text_search_request(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    """
    user_request = message.text.strip()
    
    if not user_request:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç —Ä—ã–±–∞–ª–∫–∏.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üîç –ò—â—É –º–µ—Å—Ç–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏...")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    await process_search_query(message, state, user_request, processing_msg)

@search_router.message(SearchStates.waiting_for_search_request, F.voice)
async def process_voice_search_request(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞, –ø–µ—Ä–µ–¥–∞–µ–º bot
        result = await process_voice_message(message.voice, message.bot)
        
        if result["success"]:
            user_request = result["text"]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await processing_msg.edit_text(
                f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: <i>¬´{user_request}¬ª</i>\n\nüîç –ò—â—É –º–µ—Å—Ç–∞ –¥–ª—è —Ä—ã–±–∞–ª–∫–∏...", 
                parse_mode='HTML'
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            await process_search_query(message, state, user_request, processing_msg)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await processing_msg.edit_text(
                f"‚ùå {result['error']}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–µ—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )

@search_router.message(F.voice)
async def handle_unexpected_voice(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö.
    """
    current_state = await state.get_state()
    if current_state != SearchStates.waiting_for_search_request:
        voice_hint = " —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏" if is_voice_available() else ""
        await message.answer(
            f"üé§ –ü–æ–∏—Å–∫{voice_hint} –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.\n"
            "–ù–∞–∂–º–∏—Ç–µ ¬´üé£ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –º–µ—Å—Ç¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞."
        )