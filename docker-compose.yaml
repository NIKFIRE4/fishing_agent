x-buildkit: &buildkit
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

services:
  ml_service:
    env_file:
       - ./ML_agent/.env
    build:
      context: ./ML_agent
      dockerfile: Dockerfile
    image: fishing-agent-ml:latest
    container_name: fishing_agent_ml
    ports:
      - "8001:8001"
    environment:
    - BACKEND_URL=http://parsing_service:8002/api/Places
    - PYTHONUNBUFFERED=1
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8001/health" ]
    #   interval: 30s
    #   timeout: 5s
    #   retries: 3
  tg_bot_crowdsourcing:
    env_file:
      - ./TG_bot_Crowdsourcing/.env
    build:
      context: ./TG_bot_Crowdsourcing
      dockerfile: Dockerfile
    image: tg-bot-crowdsourcing:latest
    container_name: tg_bot_crowdsourcing
    restart: unless-stopped   


  tg_bot_fishagent:
    env_file:
      - ./TG_bot_FishAgent/.env
    build:
      context: ./TG_bot_FishAgent
      dockerfile: Dockerfile
    image: tg-bot-travelai:latest
    container_name: tg_bot_travelai
    restart: unless-stopped
    

  redis:
      image: redis:latest
      # env_file:
      #  - ./backend/TgParse/.env
      container_name: redis_cache
      ports:
        - "6379:6379"
      environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      command: redis-server --requirepass ${REDIS_PASSWORD}
      healthcheck:
          test: ["CMD", "redis-cli", "ping"]
          interval: 5s
          timeout: 3s
          retries: 5
      volumes:
        - redis_data:/data
  # migrator:
  #     image: mcr.microsoft.com/dotnet/sdk:9.0
  #     container_name: fishing_migrator
  #     environment:
  #       - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
  #     volumes:
  #       - ./backend/TgParse:/app
  #       - ~/.nuget/packages:/root/.nuget/packages
  #     working_dir: /app
  #     depends_on:
  #       db:
  #         condition: service_healthy
  #     command: >
  #       sh -c "
  #         dotnet tool install --global dotnet-ef &&
  #         /root/.dotnet/tools/dotnet-ef database update --verbose"
  
  agent_backend:
    # env_file:
    # - ./backend/TgParse/.env
    build:
        context: ./backend
        dockerfile: AgentBackend/Dockerfile
    image: agent-backend:lattest
    container_name: agent_backend
    environment:
        - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
        - ASPNETCORE_ENVIRONMENT=Development
        - ASPNETCORE_URLS=http://+:8003
    
    ports: 
    - "8003:8003"
    depends_on:
      ml_service:
        condition: service_started
      minio:
        condition: service_started
      mc:
        condition: service_started    
      db:
        condition: service_started

  parsing_service:
    # env_file:
    #    - ./backend/TgParse/.env
    build:
      context: ./backend
      dockerfile: TgParse/Dockerfile
    image: fishing-parsing:latest
    container_name: parsing_service
    tty: true

    stdin_open: true
    environment:
      - ASPNETCORE_URLS=http://+:8002
      - ASPNETCORE_ENVIRONMENT=Development
      - MINIO_ENDPOINT=minio:9000
      - MINIO_BUCKET_NAME=images 
      - MINIO_USE_SSL=false
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - DB_CONNECTION_STRING=${DB_CONNECTION_STRING}
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - TELEGRAM_PHONE_NUMBER=${TELEGRAM_PHONE_NUMBER}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "8002:8002"
   
    volumes:
      - ./wtelegram:/App/wtelegram
    depends_on:
      redis:
        condition: service_healthy
      ml_service:
        condition: service_started
      minio:
        condition: service_started
      mc:
        condition: service_started    
      db:
        condition: service_started
      # migrator:  
      #   condition: service_completed_successfully
     
  minio:
    # env_file:
    #    - ${PWD}/backend/TgParse/.env
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000" 
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    volumes:
      - ./minio_data:/data 
    command: server /data --console-address :9001

  mc:
    # env_file:
    #    - ${PWD}/backend/TgParse/.env
    image: minio/mc:latest
    container_name: mc
    depends_on:
      - minio
    environment:
      - MINIO_SERVER=minio:9000 
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    entrypoint: >
      /bin/sh -c "
      #mc alias set myminio http://minio:9000 admin 1lomalsteklo;
      #mc mb myminio/images;
      #mc cp /images/* myminio/images/;  
      tail -f /dev/null"    

  db:
    # env_file:
    #    - ./backend/TgParse/.env
    image: postgres:14
    container_name: postgres_db
    

    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5433"
    expose:
        - "5433"
    command: -p 5433
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # healthcheck:
    #       test: ["CMD-SHELL", "pg_isready -U postgres -port 5433 -h localhost"]
    #       interval: 5s
    #       timeout: 5s
    #       retries: 5
    #       start_period: 15s     

  pgadmin:
    # env_file:
    #    - ./backend/TgParse/.env
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8080:80"    
    depends_on:
    - db

volumes:
  postgres_data:
  redis_data:  